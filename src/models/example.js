import oracledb from 'oracledb';
import {executeQuery} from '../helpers/database.js';

export class Example {
  constructor(data = {}) {
    this.id = data.id || null;
    this.name = data.name || null;
    this.description = data.description || null;
    this.created_at = data.created_at || null;
    this.updated_at = data.updated_at || null;
  }

  static async createTable() {
    const sql = `
      BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE examples (
          id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR2(255) NOT NULL,
          description VARCHAR2(1000),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN -- Table already exists
            RAISE;
          END IF;
      END;
    `;
    
    await executeQuery(sql);
  }

  static async findAll() {
    const sql = 'SELECT * FROM examples ORDER BY created_at DESC';
    const result = await executeQuery(sql);
    return result.rows.map(row => new Example(row));
  }

  static async findById(id) {
    const sql = 'SELECT * FROM examples WHERE id = :id';
    const result = await executeQuery(sql, [id]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return new Example(result.rows[0]);
  }

  static async create(data) {
    const sql = `
      INSERT INTO examples (name, description) 
      VALUES (:name, :description) 
      RETURNING id, created_at, updated_at INTO :id, :created_at, :updated_at
    `;
    
    const binds = {
      name: data.name,
      description: data.description || null,
      id: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER },
      created_at: { dir: oracledb.BIND_OUT, type: oracledb.DATE },
      updated_at: { dir: oracledb.BIND_OUT, type: oracledb.DATE }
    };
    
    const result = await executeQuery(sql, binds);
    
    return new Example({
      id: result.outBinds.id[0],
      name: data.name,
      description: data.description,
      created_at: result.outBinds.created_at[0],
      updated_at: result.outBinds.updated_at[0]
    });
  }

  static async update(id, data) {
    const sql = `
      UPDATE examples 
      SET name = :name, 
          description = :description, 
          updated_at = CURRENT_TIMESTAMP 
      WHERE id = :id
      RETURNING updated_at INTO :updated_at
    `;
    
    const binds = {
      id: id,
      name: data.name,
      description: data.description || null,
      updated_at: { dir: oracledb.BIND_OUT, type: oracledb.DATE }
    };
    
    const result = await executeQuery(sql, binds);
    
    if (result.rowsAffected === 0) {
      return null;
    }
    
    return await Example.findById(id);
  }

  static async delete(id) {
    const sql = 'DELETE FROM examples WHERE id = :id';
    const result = await executeQuery(sql, [id]);
    
    return result.rowsAffected > 0;
  }

  async save() {
    if (this.id) {
      const updated = await Example.update(this.id, {
        name: this.name,
        description: this.description
      });
      return updated;
    } else {
      const created = await Example.create({
        name: this.name,
        description: this.description
      });
      
      this.id = created.id;
      this.created_at = created.created_at;
      this.updated_at = created.updated_at;
      
      return this;
    }
  }
}